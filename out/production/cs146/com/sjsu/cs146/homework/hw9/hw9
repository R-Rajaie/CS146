Since we know that we're working with a BST it makes our job a lot easier.
We're given the root, so we know we can start there since the root is a common ancestor of all the nodes.
We have to approach this kinda backwards,
but the gist is to evaluate the values of the nodes p and q in comparison to the root.
If they are both less than the root, we know that they both lie left of the root,
and can ascertain that a better approximation for the LCA is the root's left node.
If p and q are greater than the root, we can say the same but for the root's right.
At this point, we have pared down the BST by approximately one half,
and can treat the left or right node to the root as our new root and apply the same process to the subtree.
We do this until p and q aren't both less than or greater than the current root.
At this point we know their paths diverge in the tree and thus the current root is the LCA, so we return it.

I want to say the time complexity would be Theta(logn) for avg and worst cases since we're going to be paring down
our options by half each recursion. For best case however, the root is the LCA and we immediately return that, giving
us a Theta(1) time complexity.