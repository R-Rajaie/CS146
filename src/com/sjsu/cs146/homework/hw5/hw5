For each of the following recurrences, verify the answer you get by applying the master method,
by solving the recurrence algebraically OR applying the recursion tree method.

1. T(N) = 2T(N-1) + 1
T(N-1) = 2T(N-2) + 1
T(N) = 2T(2T(N-2) + 1) + 1
= 4T(N-2) + 2 + 1
= 4T(N-2) + 3
T(N) = 2(2(2T(N-3) + 1) + 1) + 1
= 8T(N-3) + 4 + 2 + 1 = 8T(N-3) = 7
This follows a pattern of T(N) = (2^n * T(N-k)) + 2^k - 1
Say we have N - k = 0
We will thus have T(N) = (2^n * T(0)) + 2^k - 1
T(0) is constant so we can treat as 1 and n = k, thus:
T(N) = (2^n * 1) + 2^n - 1
= 2^n + 2^n - 1
= (2 * 2^n) - 1 = 2^(n+1) - 1
This is also a function of Theta(2^n)

2. T(N) = 3T(N-1) + n
T(N-1) = 3T(N-2)+ n
T(N) = 3(3T(N-2) + n) + n
= 9(T(N - 2) + 3n + n = 9T(N-2) + 4n
T(N) = 3(3(3T(N-3) + n) + n) + n
= 3(9T(N-3) + 3n + n) + n
= 27T(N-3) + 9n + 3n + n = 27T(N-3) + 13n
this can be generalized as T(N) = 3^n * T(N - k) + (3^(n-1)) * n + (3^(n-2)) * n + ... + (3^(n-k)) * n = (3^n - 1)/2
If N = k, N - k = 0, then we can say it is
T(N) = 3^n * 1 + (3^n - 1)/2 = 3^n + (3^n + 1) / 2 = 3/2 * 3^n - 1/2
This is also a function of Theta(3^n)


3. T(N) = 9T(N/2) + n2
T(

4. T(N) = 100T(N/2) + nlog2cn + 1  (c is a constant)


5. T(N) = 4T(N/2) + n2logn


6. T(N) = 5T(N/2) + n2/logn

Come up with a recurrence relation, and solve that recurrence relation using any method of your choice.
yetAnotherFunc(n):
  if n > 1:
    for(i=0;i<10n;i++)
      doSomething;
    yetAnotherFunc(n/2);
    yetAnotherFunc(n/2);

