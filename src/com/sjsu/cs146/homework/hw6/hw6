This one is a bit of a doozy!

First I create a set and fill it with my array. This will create sort of a "manifest" of numbers I should check.
No use in checking the potential corresponding numbers for -2 if I've already done it before. So this set will contain
each unique number I should check for. I also convert the array into an arraylist so that I can do other things easier
like take out the number I'm searching for so that I don't accidentally have two numbers with the same index.

The main driver loops through the set manifest, which then performs a modified twoSum on each number in the set.
Essentially, if we're on "2", we try to find a twoSum that equals -2. Say, -2 and 0.
We add those two numbers and 2 ([2,-2,0]), then sort it and throw it in a set so that all duplicate triplets are
filtered out by the set.
It's a little inefficient since we have to find all valid possibilities rather than just the first valid one like for
twoSum, so we can't stop at the first valid match. There's probably a more time efficient way to do it,
I just don't know what it is.

Once we have gone through that entire manifest, we can quickly convert that set of lists into a list of lists (since
we need to return a list of lists), then return it.